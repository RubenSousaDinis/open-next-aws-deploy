name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  AWS_REGION: 'eu-west-1'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npx tsc --noEmit

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Generate Prisma client
      run: npm run db:generate

    - name: Clean up previous build artifacts
      run: |
        rm -rf .open-next
        rm -rf .next

    - name: Build Next.js application
      run: |
        npm run build
        echo "‚úÖ Next.js build completed"
        ls -la .next/
        npm run build:open-next
        echo "‚úÖ OpenNext build completed"
        ls -la .open-next/
      env:
        WLD_CLIENT_ID: ${{ secrets.WLD_CLIENT_ID }}
        NEXT_PUBLIC_APP_ID: ${{ secrets.NEXT_PUBLIC_APP_ID }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

    - name: Verify OpenNext build output
      run: |
        if [ ! -d ".open-next/server-functions" ]; then
          echo "‚ùå .open-next/server-functions directory is missing!"
          echo "üìÅ Contents of .open-next:"
          ls -la .open-next/ || echo "No .open-next directory found"
          echo "üìÅ Contents of .next:"
          ls -la .next/ || echo "No .next directory found"
          exit 1
        fi
        echo "‚úÖ OpenNext build output verified"
        echo "üìÅ Server functions found:"
        ls -la .open-next/server-functions/
        echo "üìÑ OpenNext output configuration:"
        cat .open-next/open-next.output.json
        
        # Create server-function directory if it doesn't exist (for compatibility)
        if [ ! -d ".open-next/server-function" ] && [ -d ".open-next/server-functions" ]; then
          echo "üîó Creating server-function symlink for compatibility"
          ln -sf server-functions .open-next/server-function
        fi

    - name: Deploy with Terraform
      working-directory: ./terraform
      run: |
        rm -rf .terraform .terraform.lock.hcl
        terraform init
        terraform plan -var="environment=production" -var="aws_region=eu-west-1" -out=tfplan
        terraform apply -auto-approve tfplan
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_nextauth_secret: ${{ secrets.NEXTAUTH_SECRET }}
        TF_VAR_next_public_app_id: ${{ secrets.NEXT_PUBLIC_APP_ID }}
        TF_VAR_wld_client_id: ${{ secrets.WLD_CLIENT_ID }}
        TF_VAR_nexauth_url: ${{ secrets.NEXTAUTH_URL }}

    - name: Get deployment URL and update environment
      id: get-url
      run: |
        # Get the CloudFront URL from Terraform output
        cd terraform
        DEPLOY_URL=$(terraform output -json open_next_outputs | jq -r '.cloudfront_url // "Deployment URL not available"')
        echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        
        # Update the Lambda function with the correct NEXTAUTH_URL
        if [ "$DEPLOY_URL" != "Deployment URL not available" ]; then
          echo "üîÑ Updating Lambda function with correct NEXTAUTH_URL: https://$DEPLOY_URL"
          # Get the Lambda function name
          LAMBDA_FUNCTION=$(aws lambda list-functions --region eu-west-1 --query "Functions[?contains(FunctionName, 'server-function')].FunctionName" --output text)
          if [ ! -z "$LAMBDA_FUNCTION" ]; then
            aws lambda update-function-configuration \
              --function-name "$LAMBDA_FUNCTION" \
              --environment "Variables={NEXTAUTH_URL=https://$DEPLOY_URL}" \
              --region eu-west-1
            echo "‚úÖ Lambda function updated with correct NEXTAUTH_URL"
          else
            echo "‚ö†Ô∏è  Could not find Lambda function to update"
          fi
        fi

    - name: Comment deployment URL
      uses: actions/github-script@v7
      with:
        script: |
          const commentBody = `üöÄ **Deployment completed successfully!**
          
          üåê **Application URL:** ${{ steps.get-url.outputs.deploy_url }}
          
          üìÖ **Deployed at:** ${new Date().toISOString()}
          üîó **Commit:** ${context.sha.substring(0, 7)}
          
          ---
          *This deployment was triggered by a push to the main branch.*`;
          
          // Try to comment on the commit
          try {
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: commentBody
            });
          } catch (error) {
            console.log('Could not comment on commit, this is normal for direct pushes');
          } 